Introduction
Please comply with the following rules:

- Remain polite, courteous, respectful and constructive throughout the
evaluation process. The well-being of the community depends on it.

- Identify with the student or group whose work is evaluated the possible
dysfunctions in their project. Take the time to discuss and debate the
problems that may have been identified.

- You must consider that there might be some differences in how your peers
might have understood the project's instructions and the scope of its
functionalities. Always keep an open mind and grade them as honestly as
possible. The pedagogy is useful only and only if the peer-evaluation is
done seriously.
Guidelines
- Only grade the work that was turned in the Git repository of the evaluated
student or group.

- Double-check that the Git repository belongs to the student(s). Ensure that
the project is the one expected. Also, check that 'git clone' is used in an
empty folder.

- Check carefully that no malicious aliases was used to fool you and make you
evaluate something that is not the content of the official repository.

- To avoid any surprises and if applicable, review together any scripts used
to facilitate the grading (scripts for testing or automation).

- If you have not completed the assignment you are going to evaluate, you have
to read the entire subject prior to starting the evaluation process.

- Use the available flags to report an empty repository, a non-functioning
program, a Norm error, cheating, and so forth.
In these cases, the evaluation process ends and the final grade is 0,
or -42 in case of cheating. However, except for cheating, student are
strongly encouraged to review together the work that was turned in, in order
to identify any mistakes that shouldn't be repeated in the future.

- You must also verify the absence of memory leaks. Any memory allocated on
the heap must be properly freed before the end of execution.
You are allowed to use any of the different tools available on the computer,
such as leaks, valgrind, or e_fence. In case of memory leaks, tick the
appropriate flag.

Preliminary tests
Search for Julia and Mandelbrot sets on Wikipedia, or watch the e-learning videos, to have an idea of what the rendering must look like.

Minimal requirements
Does the assignment meet the minimal requirements?

The repository isn't empty.
Norminette shows no errors.
No cheating.
No forbidden function/library.
There is no global variable.
The code compiles with the required options.
The executable is named as expected.
During execution, there is no brutal or unmanaged crash (segfault, bus error, and so forth).
No memory leaks.

Mandatory part
Evaluate the following points.

Graphic management
Is the graphic management functional?

When the program runs, there is at least a graphic window open.
Pressing the key ESC exits the program properly (no leaks).
There is a visual change when using the mouse wheel (even if wrong, this part is about checking the event management only).


Julia
How does the Julia set behave?

Does it looks like it should? Search for the Julia fractal set on the internet if you're not sure.
Is it possible to zoom in and out and the basic pattern repeats?
Search for some different Julia sets. You should be able to recreate them by passing different parameters to the program.
Are there colors to represent the depth of the fractal?


Mandelbrot
How does the Mandelbrot set behave?

Does it looks like it should?
Is it possible to zoom in and out and the basic pattern repeats?
Compare the result with some reference pictures: they all look alike, you can't miss them.
Are there colors to represent the depth of the fractal?


Parameters management
Is the parameter's management implemented according to the subject?
Are wrong parameters correctly handled?
(Some optional parameters could be handled, for example for the bonus part.)

MiniLibX images
Take a look at the code and check whether the student uses the images from
the MLX to draw the image instead of putting pixels one by one. ;)

###############################################################################################################

Introdução
Por favor, cumpra as seguintes regras:

- Manter-se educado, cortês, respeitoso e construtivo durante todo o
Processo de avaliação. O bem-estar da comunidade depende disso.

- Identificar com o aluno ou grupo cujo trabalho é avaliado as possíveis
disfunções em seu projeto. Aproveite o tempo para discutir e debater o
problemas que possam ter sido identificados.

- Você deve considerar que pode haver algumas diferenças em como seus colegas
poderia ter entendido as instruções do projeto e o escopo de sua
funcionalidades. Sempre mantenha a mente aberta e avalie-os da forma mais honesta possível.
possível. A pedagogia é útil apenas e somente se a avaliação pelos pares for
feito a sério.

Diretrizes
- Avaliar apenas o trabalho que foi entregue no repositório Git do avaliado
aluno ou grupo.

- Verifique novamente se o repositório Git pertence ao(s) aluno(s). Garanta que
o projeto é o esperado. Além disso, verifique se 'git clone' é usado em um
pasta vazia.

- Verifique cuidadosamente se nenhum alias malicioso foi usado para enganá-lo e torná-lo
avaliar algo que não é o conteúdo do repositório oficial.

- Para evitar surpresas e, se aplicável, revise juntos os scripts usados
para facilitar a classificação (scripts para teste ou automação).

- Se você não concluiu o trabalho que vai avaliar, você
ler toda a matéria antes de iniciar o processo de avaliação.

- Use os sinalizadores disponíveis para relatar um repositório vazio, um não funcionamento
programa, um erro de norma, trapaça e assim por diante.
Nestes casos, o processo de avaliação termina e a nota final é 0,
ou -42 em caso de trapaça. No entanto, exceto por trapaça, o aluno é
fortemente encorajados a revisar juntos o trabalho que foi entregue, a fim de
para identificar erros que não devem ser repetidos no futuro.

- Você também deve verificar a ausência de vazamentos de memória. Qualquer memória alocada em
o heap deve ser devidamente liberado antes do final da execução.
Você tem permissão para usar qualquer uma das diferentes ferramentas disponíveis no computador,
como vazamentos, valgrind ou e_fence. Em caso de vazamentos de memória, marque o
bandeira apropriada.

testes preliminares
Pesquise os conjuntos de Julia e Mandelbrot na Wikipedia ou assista aos vídeos de e-learning para ter uma ideia de como deve ser a renderização.

Requisitos mínimos
A tarefa atende aos requisitos mínimos?

O repositório não está vazio.
Norminette não apresenta erros.
Sem trapaça.
Nenhuma função/biblioteca proibida.
Não há variável global.
O código compila com as opções necessárias.
O executável é nomeado conforme o esperado.
Durante a execução, não há travamento brutal ou não gerenciado (segfault, erro de barramento e assim por diante).
Sem vazamentos de memória.

parte obrigatória
Avalie os seguintes pontos.

gestão gráfica
A gestão gráfica é funcional?

Quando o programa é executado, há pelo menos uma janela gráfica aberta.
Pressionando a tecla ESC sai do programa corretamente (sem vazamentos).
Há uma mudança visual ao usar a roda do mouse (mesmo que errado, esta parte trata apenas de verificar o gerenciamento de eventos).


Júlia
Como o conjunto Julia se comporta?

Parece que deveria? Pesquise o conjunto fractal de Julia na internet se não tiver certeza.
É possível aumentar e diminuir o zoom e repetir o padrão básico?
Procure alguns conjuntos diferentes de Julia. Você deve ser capaz de recriá-los passando diferentes parâmetros para o programa.
Existem cores para representar a profundidade do fractal?


Mandelbrot
Como o conjunto de Mandelbrot se comporta?

Parece que deveria?
É possível aumentar e diminuir o zoom e repetir o padrão básico?
Compare o resultado com algumas fotos de referência: todas são parecidas, você não pode errar.
Existem cores para representar a profundidade do fractal?


Gerenciamento de parâmetros
A gestão dos parâmetros é implementada de acordo com o assunto?
Os parâmetros errados são tratados corretamente?
(Alguns parâmetros opcionais podem ser manipulados, por exemplo, para a parte bônus.)

imagens MiniLibX
Dê uma olhada no código e verifique se o aluno utiliza as imagens do
o MLX para desenhar a imagem ao invés de colocar os pixels um a um. ;)